name: CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install AWS CLI
        run: npm install -g aws-cdk

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Test
        run: npm run test

      - name: Build
        run: npm run build

      - name: CDK Deploy
        run: |
          cdk deploy --all -vv --require-approval never -c config=dev -O cdk-outputs.json
          echo "CDK Outputs: \n$(cat cdk-outputs.json)"

      - name: Upload CDK Outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs
          path: cdk-outputs.json
          retention-days: 1
          if-no-files-found: error

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    needs: [ deploy-infrastructure ]
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Format Check
        run: npm run format:check

      - name: Test
        run: npm run test

      - name: Download CDK Outputs
        uses: actions/download-artifact@v4
        with:
          name: cdk-outputs
          path: frontend/cdk-outputs.json

      - name: Write .env.build File
        run: |
          echo "COGNITO_USER_POOL_ID=$(jq -r '.AuthStack.CognitoUserPoolId' cdk-outputs.json)" > .env.build
          echo "COGNITO_USER_POOL_CLIENT_ID=$(jq -r '.AuthStack.CognitoUserPoolClientId' cdk-outputs.json)" >> .env.build

      - name: Build
        run: npm run build

      - name: Upload Frontend Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1
          if-no-files-found: error

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to S3
        run: |
          FRONTEND_BUCKET_NAME=$(jq -r '.ReactAppStack.ReactAppDeploymentBucketName' cdk-outputs.json)
          CLOUDFRONT_DISTRIBUTION_ID=$(jq -r '.ReactAppStack.ReactAppDistributionId' cdk-outputs.json)
          aws s3 sync dist s3://${{ secrets.S3_BUCKET_NAME }} --delete
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"